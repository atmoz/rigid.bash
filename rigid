#!/bin/bash

#
# Rigid - Generate static webpage with markdown and simple template
#
# Usage: rigid [sourceDir] [targetDir] [templateFile]
#
# Instructions:
# - Create "rigid.template.html" in source directories. Each directory will use
#   it's own template recursively.
# - Run this script from source directory (or add path as first argument).
#   Source directory is copied to <sourceDir>.rigid (or secound argument).
#   Each *.md file is converted to HTML and wrapped with your template.
#
# Author: Adrian Dvergsdal <atmoz.net & github.com/atmoz>
#


################################################################################
#
# License
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# http://www.gnu.org/licenses/
#


################################################################################
#
# Configuration
#
# @param $1 sourceDir
# @param $2 targetDir
#
function rigid_prepareSettings() {
    scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    md2html="$scriptDir/md2html.awk"

    sourceDir="$PWD"
    targetDir="$sourceDir/../`basename $sourceDir`.rigid"

    if [ ! -z $1 ]; then
        sourceDir="$1"
    fi

    if [ ! -z $2 ]; then
        targetDir="$2"
    fi
}


################################################################################
#
# Build dir structure
#
function rigid_build() {
    echo "Copying \"$sourceDir\" to \"$targetDir\""

    # remove old targetDir
    rm -rf $targetDir

    # copy sourceDir to targetDir
    mkdir -p $targetDir
    cp -rf $sourceDir/* $targetDir

    # remove files not needed in targetDir
    rm -f "$targetDir/"{rigid,md2html.awk}
    find "$targetDir" -name "rigid.template.html" -exec rm -f {} \;

    # remove markdown files
    #rm -f `find $targetDir -type f -iname '*.md'`

    index=$(rigid_generateIndex)

    echo "Parsing markdown files ..."
    cd $sourceDir
    local files=`find . -iname '*.md' -type f | sed -e 's,^\./,,'`
    for sourceFile in $files; do
        local targetFile="`echo $sourceFile | sed -e 's,.md$,.html,g'`"
        echo "* $sourceFile"
        rigid_generatePage $sourceFile > $targetDir/$targetFile;
    done
}


################################################################################
#
# Generate index
#
function rigid_generateIndex() {
    cd $targetDir
    local files=`ls $(find . -iname '*.md' -o -iname '*.html' | sed -e 's,^\./,,')`
    echo "<ul>"
    for file in $files; do
        link=$(echo $file | sed -e 's,.md$,.html,g')
        title=$(rigid_getPageTitle "$file")
        echo "<li><a href=\"$link\">$title</a></li>"
    done
    echo "</ul>"
}


################################################################################
#
# Generate page with template and convert markdown to HTML
#
# @param $1 filename
#
function rigid_generatePage() {
    page_title=$(rigid_getPageTitle "$1")
    page_published=$(rigid_getPublishedDate "$1")
    page_date=$(date -d"$page_published" +%Y-%m-%d)

    # convert markdown to HTML
    if [ -x "$md2html" ]; then
        local content=$(echo `$md2html $1`)
    else
        local content=$(<$1)
    fi

    local pageDir="./$(dirname "$1")"
    local numDirs=$(echo "$pageDir" | grep -o "/" | wc -l)

    # if page is not in root, add one extra dir count for root template
    if [[ "$pageDir" != "./." ]]; then
        let numDirs=$numDirs+1
    fi

    echo "numDirs $numDirs for $pageDir in $PWD"
    until [ $numDirs -eq 0 ]; do
        local templateFile="$pageDir/rigid.template.html"
        echo "TESTING $templateFile"

        if [ -r "$templateFile" ]; then
            content=$(rigid_applyTemplate "$content" "$(<$templateFile)")
        fi

        pageDir="$(dirname "$pageDir")"
        let numDirs-=1
    done

    echo "$content"
}


################################################################################
#
# Apply template to content with placeholders
#
# @param $1 content
# @param $2 template
#
function rigid_applyTemplate() {
    local content="$1"
    local template="$2"

    local result="$template"
    result=$(echo "${result//\%TITLE\%/$page_title}")
    result=$(echo "${result//\%DATE\%/$page_date}")
    result=$(echo "${result//\%CONTENT\%/$content}")
    result=$(echo "${result//\%INDEX\%/$index}")

    echo "$result"
}


################################################################################
#
# Get date when file was added to git or created in filesystem
#
# @param $1 filename
#
function rigid_getPublishedDate() {
    if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
        hash git 2>&- && local gitdate=$(git log --format=%aD -- "$1" | tail -1)
    fi

    if [ -n "$gitdate" ]; then
        echo "$gitdate"
    else
        date -R -r "$1"
    fi
}


################################################################################
#
# Get page title
#
# @param $1 filename
#
function rigid_getPageTitle() {
    if [[ "$1" =~ .*\.md$ ]]; then
        title=$(sed -n '/^# /p' <$1 | sed -e 's/^# //')
        if [ -z "$title" ]; then
            echo "$1" # giving up for now
        else
            echo "$title"
        fi
    elif [[ "$1" =~ .*\.html$ ]]; then
        sed -n 's/<title>\(.*\)<\/title>/\1/Ip' <$1 | sed 's/^ *//g'
    else
        echo "$1"
    fi
}


################################################################################
#
# Create RSS for content in dir
#
# @param $1 directory
#
function rigid_createRss() {
    cd $1;
    local rssfile="$1.$RANDOM"
    while [ -f "$rssfile" ]; do rssfile="$1.$RANDOM"; done

    echo '<?xml version="1.0" encoding="UTF-8" ?>' >> "$rssfile"
    echo '<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">' >> "$rssfile"
    echo '<channel><title>'$global_title'</title><link>'$global_url'</link>' >> "$rssfile"
    echo '<description>'$global_description'</description><language>en</language>' >> "$rssfile"
    echo '<lastBuildDate>'$(date -R)'</lastBuildDate>' >> "$rssfile"
    echo '<pubDate>'$(date -R)'</pubDate>' >> "$rssfile"
    echo '<atom:link href="'$global_url/$blog_feed'" rel="self" type="application/rss+xml" />' >> "$rssfile"

    n=0
    for i in $(ls -t *.html); do
        if [ "$i" == "$index_file" ] || [ "$i" == "$archive_index" ]; then continue; fi
        if [ "$n" -ge "$number_of_feed_articles" ]; then break; fi # max 10 items
        echo -n "."
        echo '<item><title>' >> "$rssfile"
        echo "$(awk '/<h3><a class="ablack" href=".+">/, /<\/a><\/h3>/{if (!/<h3><a class="ablack" href=".+">/ && !/<\/a><\/h3>/) print}' $i)" >> "$rssfile"
        echo '</title><description><![CDATA[' >> "$rssfile"
        echo "$(awk '/<!-- text begin -->/, /<!-- entry end -->/{if (!/<!-- text begin -->/ && !/<!-- entry end -->/) print}' $i)" >> "$rssfile"

        echo "]]></description><link>$global_url/$i</link>" >> "$rssfile"
        echo "<guid>$global_url/$i</guid>" >> "$rssfile"
        echo "<dc:creator>$global_author</dc:creator>" >> "$rssfile"
        echo '<pubDate>'$(date -r "$i" -R)'</pubDate></item>' >> "$rssfile"

        n=$(( $n + 1 ))
    done

    echo '</channel></rss>' >> "$rssfile"
    echo ""

    mv "$rssfile" "$blog_feed"
    chmod 644 "$blog_feed"
}


################################################################################
#
# Rigidify!
#
rigid_prepareSettings $1 $2 $3
rigid_build
echo "Done."
echo ""

