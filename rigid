#!/usr/bin/env bash
#
#   rigid [sourceDir] [targetDir]
#
# Generate static webpage with markdown and simple template
#
# Requirements: Bash 4 and GNU implementation of AWK
# Programs used: awk, sed, realpath, basename, dirname, find
#
# Author: Adrian Dvergsdal <atmoz.net & github.com/atmoz>
#


################################################################################
#
# License
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# http://www.gnu.org/licenses/
#


################################################################################
#
# Configuration
#
# @param $1 sourceDir
# @param $2 targetDir
#
function rigid_prepareSettings() {
    shopt -s extglob # extended pattern matching

    scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    md2html="$scriptDir/md2html.awk"

    sourceDir="$(realpath "${1:-"$PWD"}")"
    targetDir="$(realpath "${2:-"$sourceDir/../$(basename "$sourceDir").rigid"}")"

    blacklist=".git"
}


################################################################################
#
# Build dir structure
#
function rigid_build() {
    echo "Copying \"$sourceDir\" to \"$targetDir\""

    # remove old targetDir
    rm -rf "$targetDir"

    # copy sourceDir to targetDir
    mkdir -p "$targetDir"
    cp -rf "$sourceDir"/* "$targetDir"

    # remove files not needed in targetDir
    rm -f "$targetDir/"{rigid,md2html.awk}
    find "$targetDir" -name "rigid.template.html" -exec rm -f "{}" \;

    # remove blacklisted files/folders
    for file in $blacklist; do
        rm -Rf "$targetDir/$file"
    done

    # remove markdown files
    #rm -f `find $targetDir -type f -iname '*.md'`

    # prepare index
    readonly index="$(rigid_generateIndex)"

    echo "Parsing markdown files"
    cd "$sourceDir" || exit 1
    local files="$(find . -path ./.git -prune -o -iname '*.md' -type f -print)"
    files="${files//\.\//}" # removes "./"
    for sourceFile in $files; do
        local targetFile="$(echo "$sourceFile" | sed -e 's,.md$,.html,g')"
        echo "* $sourceFile"
        rigid_generatePage "$sourceFile" "$targetFile"
    done
}


################################################################################
#
# Check if file is in the blacklist
#
# @param $1 filename
#
rigid_fileInBlacklist() {
    for file in $blacklist; do
        [ "$file" = "$1" ] && return 0
    done
}


################################################################################
#
# Generate index with date
#
function rigid_generateIndex() {
    cd "$sourceDir" || exit 1
    local files="$(find . -iname '*.md' -o -iname '*.html' |\
        sed -e 's,^\./,,' -e '/rigid.template.html/d')"

    # add date
    local datedFiles=""
    for file in $files; do
        date="$(rigid_getPublishedDate "$file" 3)"
        datedFiles="$(printf "%s\n%s\t%s" "$datedFiles" "$date" "$file")"
    done

    # remove empty lines
    datedFiles="$(sed -e '/^$/d' <<< "$datedFiles")"

    echo "$datedFiles"
}


################################################################################
#
# Format index
#
# @param $1 prefix URL (use "null" for empty argument)
# @param $2 filter items based on filename
# @param $3 sort by (name or date)
# @param $4 sort params (see sort man page)
#
function rigid_formatedIndex() {
    local prefix="${1:-""}"
    local filter="${2:-".*"}"
    local sortBy="${3:-"name"}"
    local sortParams="${4:-""}"

    [ "$prefix" == "null" ] && prefix=''

    local datedIndex="$index"
    local cleanIndex="$(echo "$index" | cut -f 2-)" # remove date

    # sort
    case "$sortBy" in
        date)
            local formatedIndex="$(echo "$datedIndex" | sort $sortParams | cut -f 2-)" ;;
        *)
            local formatedIndex="$(echo "$cleanIndex" | sort $sortParams)" ;;
    esac

    # filter
    formatedIndex="$(echo "$formatedIndex" | grep "$filter")"

    # generate list element with link for each file
    while read -r file; do
        local link="$(echo "$prefix""$file" | sed -e 's,.md$,.html,g')"
        local title="$(rigid_getPageTitle "$file")"
        echo "<li><a href=\"$link\">$title</a></li>"
    done <<< "$formatedIndex"
}

################################################################################
#
# Output text if file is being rendered
#
# @param $1 filename
# @param $2 text
#
function rigid_iffile() {
    local file="${1:-""}"
    local text="${2:-""}"

    if [ "$targetFile" == "$file" ]; then
        echo "$text"
    fi
}

################################################################################
#
# Generate page with template and convert markdown to HTML
#
# @param $1 filename from
# @param $2 filename to
#
function rigid_generatePage() {
    sourceFile="$1"
    targetPath="$2"
    page_title="$(rigid_getPageTitle "$sourceFile")"
    page_date="$(rigid_getPublishedDate "$sourceFile" 2)"

    # convert markdown to HTML
    if [ -x "$md2html" ]; then
        local content="$($md2html "$sourceFile")"
    else
        local content="$(<"$sourceFile")"
    fi

    local pageDir="./$(dirname "$sourceFile")"
    local numDirs="$(echo "$pageDir" | grep -o "/" | wc -l)"

    # if page is not in root, add one extra dir count for root template
    if [[ "$pageDir" != "./." ]]; then
        let numDirs=$numDirs+1
    fi

    # apply templates
    until [ "$numDirs" -eq 0 ]; do
        local templateFile="$pageDir/rigid.template.html"

        if [ -r "$templateFile" ]; then
            content="$(rigid_applyTemplate "$content" "$(<$templateFile)")"
        fi

        pageDir="$(dirname "$pageDir")"
        let numDirs-=1
    done

    echo "$content" > "$targetDir/$targetFile"
}


################################################################################
#
# Apply template to content with placeholders
#
# @param $1 content
# @param $2 template
#
function rigid_applyTemplate() {
    local content="$1"
    local template="$2"

    local result="$template"
    result="$(echo "${result//\%TITLE\%/$page_title}")"
    result="$(echo "${result//\%DATE\%/$page_date}")"

    while [[ $result =~ \%INDEX\(([^\)]*)\)\% ]]; do
        local formatedIndex="$(rigid_formatedIndex ${BASH_REMATCH[1]})"
        result="$(echo "${result//${BASH_REMATCH[0]}/$formatedIndex}")"
    done
    local formatedIndex="$(rigid_formatedIndex)"
    result="$(echo "${result//\%INDEX\%/$formatedIndex}")"

    while [[ $result =~ \%IFFILE\(([^\)]*)\)\% ]]; do
        local iffile="$(rigid_iffile ${BASH_REMATCH[1]})"
        result="$(echo "${result//${BASH_REMATCH[0]}/$iffile}")"
    done

    result="$(echo "${result//\%CONTENT\%/$content}")"

    echo "$result"
}


################################################################################
#
# Get date when file was added to git or created in filesystem
#
# @param $1 filename
# @param $2 integer 1 for RFC 2822 (default)
#                   2 for YYYY-MM-DD
#                   3 for YYYY-MM-DD hh:mm:ss
#
function rigid_getPublishedDate() {
    # first try git
    if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
        hash git 2>&- && local result="$(git log --format=%aD -- "$1" | tail -1)"
    fi

    # use filesystem if git failed
    if [ -z "$result" ]; then
        local result="$(date -R -r "$1")"
    fi

    # alternative formats
    case $2 in
        2)
            result="$(date -d"$result" +%Y-%m-%d)" ;;
        3)
            result="$(date -d"$result" +"%Y-%m-%d %H:%M:%S")" ;;
    esac

    echo "$result"
}


################################################################################
#
# Get page title
#
# @param $1 filename
#
function rigid_getPageTitle() {
    if [[ "$1" =~ .*\.md$ ]]; then
        title="$(sed -n '/^# /p' <"$1" | sed -e 's/^# //' | head -n1)"
        if [ -z "$title" ]; then
            echo "$1" # giving up for now
        else
            echo "$title"
        fi
    elif [[ "$1" =~ .*\.html$ ]]; then
        sed -n 's/<title>\(.*\)<\/title>/\1/Ip' <"$1" | sed 's/^ *//g'
    else
        echo "$1"
    fi
}


################################################################################
#
# Create RSS for content in dir
#
# @param $1 directory
#
function rigid_createRss() {
    cd "$1" || return 1

    local rssfile="$1.$RANDOM"
    while [ -f "$rssfile" ]; do rssfile="$1.$RANDOM"; done

    echo '<?xml version="1.0" encoding="UTF-8" ?>' >> "$rssfile"
    echo '<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">' >> "$rssfile"
    echo '<channel><title>'$global_title'</title><link>'$global_url'</link>' >> "$rssfile"
    echo '<description>'$global_description'</description><language>en</language>' >> "$rssfile"
    echo '<lastBuildDate>'$(date -R)'</lastBuildDate>' >> "$rssfile"
    echo '<pubDate>'$(date -R)'</pubDate>' >> "$rssfile"
    echo '<atom:link href="'$global_url/$blog_feed'" rel="self" type="application/rss+xml" />' >> "$rssfile"

    n=0
    for i in $(ls -t *.html); do
        if [ "$i" == "$index_file" ] || [ "$i" == "$archive_index" ]; then continue; fi
        if [ "$n" -ge "$number_of_feed_articles" ]; then break; fi # max 10 items
        echo -n "."
        echo '<item><title>' >> "$rssfile"
        echo "$(awk '/<h3><a class="ablack" href=".+">/, /<\/a><\/h3>/{if (!/<h3><a class="ablack" href=".+">/ && !/<\/a><\/h3>/) print}' $i)" >> "$rssfile"
        echo '</title><description><![CDATA[' >> "$rssfile"
        echo "$(awk '/<!-- text begin -->/, /<!-- entry end -->/{if (!/<!-- text begin -->/ && !/<!-- entry end -->/) print}' $i)" >> "$rssfile"

        echo "]]></description><link>$global_url/$i</link>" >> "$rssfile"
        echo "<guid>$global_url/$i</guid>" >> "$rssfile"
        echo "<dc:creator>$global_author</dc:creator>" >> "$rssfile"
        echo '<pubDate>'$(date -r "$i" -R)'</pubDate></item>' >> "$rssfile"

        n=$(( $n + 1 ))
    done

    echo '</channel></rss>' >> "$rssfile"
    echo ""

    mv "$rssfile" "$blog_feed"
    chmod 644 "$blog_feed"
}


################################################################################
#
# Rigidify!
#
rigid_prepareSettings "$1" "$2" "$3"
rigid_build
echo "Done."
echo ""

